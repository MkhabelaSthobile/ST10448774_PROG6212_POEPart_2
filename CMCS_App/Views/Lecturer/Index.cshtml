@model IEnumerable<CMCS_App.Models.Claim>

@{
    ViewData["Title"] = "Lecturer Dashboard";
}

<div class="container mt-4">
    <h2 class="mb-4 text-primary">Lecturer Dashboard</h2>

    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Submit Claim -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0"><i class="fas fa-file-invoice"></i> Submit a New Claim</h5>
        </div>
        <div class="card-body">
            <form asp-action="SubmitClaim" method="post" enctype="multipart/form-data" id="claimForm">
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="ModuleName" class="form-label">Module Name *</label>
                            <input type="text" class="form-control" id="ModuleName" name="ModuleName"
                                   required placeholder="e.g., Computer Science" maxlength="100" />
                        </div>

                        <div class="mb-3">
                            <label for="HourlyRate" class="form-label">Hourly Rate (R) *</label>
                            <input type="number" class="form-control" id="HourlyRate" name="HourlyRate"
                                   step="0.01" min="0.01" max="1000" required
                                   placeholder="Enter hourly rate" />
                            <small class="form-text text-muted">Rate must be between R0.01 and R1000</small>
                        </div>

                        <div class="mb-3">
                            <label for="Month" class="form-label">Month *</label>
                            <select class="form-control" id="Month" name="Month" required>
                                <option value="">Select Month</option>
                                <option value="January">January</option>
                                <option value="February">February</option>
                                <option value="March">March</option>
                                <option value="April">April</option>
                                <option value="May">May</option>
                                <option value="June">June</option>
                                <option value="July">July</option>
                                <option value="August">August</option>
                                <option value="September">September</option>
                                <option value="October">October</option>
                                <option value="November">November</option>
                                <option value="December">December</option>
                            </select>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="HoursWorked" class="form-label">Hours Worked *</label>
                            <input type="number" class="form-control" id="HoursWorked" name="HoursWorked"
                                   min="1" max="200" required placeholder="Enter hours worked" />
                            <small class="form-text text-muted">Hours must be between 1 and 200</small>
                        </div>

                        <div class="mb-3">
                            <label for="TotalAmount" class="form-label">Total Amount (R)</label>
                            <input type="text" class="form-control bg-light" id="TotalAmount" readonly
                                   placeholder="Will be calculated automatically" />
                        </div>

                        <div class="mb-3">
                            <label for="SupportingDocument" class="form-label">Upload Supporting Document</label>
                            <input type="file" class="form-control" id="SupportingDocument" name="supportingDocument"
                                   accept=".pdf,.docx,.xlsx,.jpg,.jpeg,.png" />
                            <div class="form-text">
                                <strong>Accepted formats:</strong> PDF, DOCX, XLSX, JPG, PNG<br />
                                <strong>Maximum size:</strong> 5MB
                            </div>
                            <div id="fileInfo" class="mt-2 text-success"></div>
                        </div>
                    </div>
                </div>

                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="reset" class="btn btn-secondary">
                        <i class="fas fa-times"></i> Clear Form
                    </button>
                    <button type="submit" class="btn btn-success btn-lg">
                        <i class="fas fa-paper-plane"></i> Submit Claim
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Quick Stats -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card text-white bg-info">
                <div class="card-body">
                    <h5 class="card-title">@Model.Count()</h5>
                    <p class="card-text">Total Claims</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-warning">
                <div class="card-body">
                    <h5 class="card-title">@Model.Count(c => c.Status == "Submitted")</h5>
                    <p class="card-text">Pending Review</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-success">
                <div class="card-body">
                    <h5 class="card-title">@Model.Count(c => c.Status.Contains("Approved"))</h5>
                    <p class="card-text">Approved</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-danger">
                <div class="card-body">
                    <h5 class="card-title">@Model.Count(c => c.Status.Contains("Rejected"))</h5>
                    <p class="card-text">Rejected</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Claim Status -->
    <div class="card shadow-sm">
        <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
            <span><i class="fas fa-history"></i> My Claim History</span>
            <span class="badge bg-light text-dark">@Model.Count() claims</span>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-bordered table-striped align-middle">
                        <thead class="table-dark">
                            <tr>
                                <th>Claim ID</th>
                                <th>Module</th>
                                <th>Month</th>
                                <th>Hours</th>
                                <th>Hourly Rate</th>
                                <th>Total Amount</th>
                                <th>Document</th>
                                <th>Status</th>
                                <th>Rejection Reason</th>
                                <th>Submission Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var claim in Model)
                            {
                                <tr>
                                    <td><strong>#@claim.ClaimID</strong></td>
                                    <td>@claim.ModuleName</td>
                                    <td>@claim.Month</td>
                                    <td>@claim.HoursWorked hrs</td>
                                    <td>R @claim.HourlyRate.ToString("N2")</td>
                                    <td><strong>R @claim.TotalAmount.ToString("N2")</strong></td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(claim.SupportingDocument))
                                        {
                                            <a asp-action="DownloadDocument" asp-route-claimId="@claim.ClaimID" asp-route-fileName="@claim.SupportingDocument"
                                               class="btn btn-sm btn-info text-decoration-none">
                                                <i class="fas fa-download"></i> Download
                                            </a>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No document</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(claim.Status)">
                                            @claim.Status
                                        </span>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(claim.RejectionReason))
                                        {
                                            <small class="text-danger"><strong>@claim.RejectionReason</strong></small>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>@claim.SubmissionDate.ToString("dd MMM yyyy HH:mm")</td>
                                    <td>
                                        <a asp-action="Details" asp-route-id="@claim.ClaimID"
                                           class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-eye"></i> View
                                        </a>
                                        @if (claim.Status == "Submitted")
                                        {
                                            <form asp-action="DeleteClaim" method="post" class="d-inline"
                                                  onsubmit="return confirm('Are you sure you want to delete this claim?');">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@claim.ClaimID" />
                                                <button type="submit" class="btn btn-sm btn-outline-danger">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            </form>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center text-muted py-5">
                    <i class="fas fa-inbox fa-3x mb-3"></i>
                    <h5>No claims submitted yet</h5>
                    <p>Use the form above to submit your first claim.</p>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Calculate total amount automatically
        document.addEventListener('DOMContentLoaded', function() {
            const hoursInput = document.getElementById('HoursWorked');
            const rateInput = document.getElementById('HourlyRate');
            const totalInput = document.getElementById('TotalAmount');
            const fileInput = document.getElementById('SupportingDocument');
            const fileInfo = document.getElementById('fileInfo');

            function calculateTotal() {
                const hours = parseFloat(hoursInput.value) || 0;
                const rate = parseFloat(rateInput.value) || 0;
                const total = hours * rate;
                totalInput.value = 'R ' + total.toFixed(2);
            }

            hoursInput.addEventListener('input', calculateTotal);
            rateInput.addEventListener('input', calculateTotal);

            // File upload feedback
            fileInput.addEventListener('change', function() {
                if (this.files.length > 0) {
                    const file = this.files[0];
                    const sizeMB = (file.size / (1024 * 1024)).toFixed(2);

                    if (file.size > 5 * 1024 * 1024) {
                        fileInfo.innerHTML = '<i class="fas fa-exclamation-triangle"></i> File size exceeds 5MB limit!';
                        fileInfo.className = 'mt-2 text-danger';
                        this.value = '';
                    } else {
                        fileInfo.innerHTML = '<i class="fas fa-check-circle"></i> File selected: ' + file.name + ' (' + sizeMB + ' MB)';
                        fileInfo.className = 'mt-2 text-success';
                    }
                } else {
                    fileInfo.innerHTML = '';
                }
            });

            // Initialize calculation on page load
            calculateTotal();

            // Auto-dismiss alerts after 5 seconds
            setTimeout(function() {
                const alerts = document.querySelectorAll('.alert');
                alerts.forEach(function(alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                });
            }, 5000);
        });
    </script>
}

@functions {
    public string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Submitted" => "bg-warning text-dark",
            "Approved by Coordinator" => "bg-info text-dark",
            "Approved by Manager" => "bg-success",
            _ when status.Contains("Rejected") => "bg-danger",
            _ => "bg-secondary"
        };
    }
}